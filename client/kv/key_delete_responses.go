// Code generated by go-swagger; DO NOT EDIT.

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/stevexnicholls/next/models"
)

// KeyDeleteReader is a Reader for the KeyDelete structure.
type KeyDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeyDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewKeyDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewKeyDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewKeyDeleteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKeyDeleteNoContent creates a KeyDeleteNoContent with default headers values
func NewKeyDeleteNoContent() *KeyDeleteNoContent {
	return &KeyDeleteNoContent{}
}

/*KeyDeleteNoContent handles this case with default header values.

Deleted successfully
*/
type KeyDeleteNoContent struct {
}

func (o *KeyDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /kv/{key}][%d] keyDeleteNoContent ", 204)
}

func (o *KeyDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewKeyDeleteNotFound creates a KeyDeleteNotFound with default headers values
func NewKeyDeleteNotFound() *KeyDeleteNotFound {
	return &KeyDeleteNotFound{}
}

/*KeyDeleteNotFound handles this case with default header values.

The entry was not found
*/
type KeyDeleteNotFound struct {
	Payload *models.Error
}

func (o *KeyDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /kv/{key}][%d] keyDeleteNotFound  %+v", 404, o.Payload)
}

func (o *KeyDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeyDeleteDefault creates a KeyDeleteDefault with default headers values
func NewKeyDeleteDefault(code int) *KeyDeleteDefault {
	return &KeyDeleteDefault{
		_statusCode: code,
	}
}

/*KeyDeleteDefault handles this case with default header values.

Error
*/
type KeyDeleteDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the key delete default response
func (o *KeyDeleteDefault) Code() int {
	return o._statusCode
}

func (o *KeyDeleteDefault) Error() string {
	return fmt.Sprintf("[DELETE /kv/{key}][%d] KeyDelete default  %+v", o._statusCode, o.Payload)
}

func (o *KeyDeleteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
