// Code generated by go-swagger; DO NOT EDIT.

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/stevexnicholls/next/models"
)

// ValueGetReader is a Reader for the ValueGet structure.
type ValueGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValueGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewValueGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewValueGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewValueGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewValueGetOK creates a ValueGetOK with default headers values
func NewValueGetOK() *ValueGetOK {
	return &ValueGetOK{}
}

/*ValueGetOK handles this case with default header values.

successful operation
*/
type ValueGetOK struct {
	Payload *models.KeyValue
}

func (o *ValueGetOK) Error() string {
	return fmt.Sprintf("[GET /v1alpha/kv/{key}][%d] valueGetOK  %+v", 200, o.Payload)
}

func (o *ValueGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeyValue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValueGetNotFound creates a ValueGetNotFound with default headers values
func NewValueGetNotFound() *ValueGetNotFound {
	return &ValueGetNotFound{}
}

/*ValueGetNotFound handles this case with default header values.

The entry was not found
*/
type ValueGetNotFound struct {
	Payload *models.Error
}

func (o *ValueGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v1alpha/kv/{key}][%d] valueGetNotFound  %+v", 404, o.Payload)
}

func (o *ValueGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValueGetDefault creates a ValueGetDefault with default headers values
func NewValueGetDefault(code int) *ValueGetDefault {
	return &ValueGetDefault{
		_statusCode: code,
	}
}

/*ValueGetDefault handles this case with default header values.

Error
*/
type ValueGetDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the value get default response
func (o *ValueGetDefault) Code() int {
	return o._statusCode
}

func (o *ValueGetDefault) Error() string {
	return fmt.Sprintf("[GET /v1alpha/kv/{key}][%d] ValueGet default  %+v", o._statusCode, o.Payload)
}

func (o *ValueGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
