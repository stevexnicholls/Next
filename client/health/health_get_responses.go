// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// HealthGetReader is a Reader for the HealthGet structure.
type HealthGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHealthGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewHealthGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewHealthGetOK creates a HealthGetOK with default headers values
func NewHealthGetOK() *HealthGetOK {
	return &HealthGetOK{}
}

/*HealthGetOK handles this case with default header values.

confirm that the service is healthy
*/
type HealthGetOK struct {
}

func (o *HealthGetOK) Error() string {
	return fmt.Sprintf("[GET /health][%d] healthGetOK ", 200)
}

func (o *HealthGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHealthGetDefault creates a HealthGetDefault with default headers values
func NewHealthGetDefault(code int) *HealthGetDefault {
	return &HealthGetDefault{
		_statusCode: code,
	}
}

/*HealthGetDefault handles this case with default header values.

generic error response
*/
type HealthGetDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the health get default response
func (o *HealthGetDefault) Code() int {
	return o._statusCode
}

func (o *HealthGetDefault) Error() string {
	return fmt.Sprintf("[GET /health][%d] HealthGet default  %+v", o._statusCode, o.Payload)
}

func (o *HealthGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
