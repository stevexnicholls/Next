// Code generated by mockery v1.0.0. DO NOT EDIT.

package restapi

import context "context"
import kv "github.com/stevexnicholls/next/restapi/operations/kv"
import middleware "github.com/go-openapi/runtime/middleware"
import mock "github.com/stretchr/testify/mock"

// MockKvAPI is an autogenerated mock type for the MockKvAPI type
type MockKvAPI struct {
	mock.Mock
}

// KeyDelete provides a mock function with given fields: ctx, params
func (_m *MockKvAPI) KeyDelete(ctx context.Context, params kv.KeyDeleteParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, kv.KeyDeleteParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// KeyList provides a mock function with given fields: ctx, params
func (_m *MockKvAPI) KeyList(ctx context.Context, params kv.KeyListParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, kv.KeyListParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// ValueGet provides a mock function with given fields: ctx, params
func (_m *MockKvAPI) ValueGet(ctx context.Context, params kv.ValueGetParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, kv.ValueGetParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// ValueUpdate provides a mock function with given fields: ctx, params
func (_m *MockKvAPI) ValueUpdate(ctx context.Context, params kv.ValueUpdateParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, kv.ValueUpdateParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}
