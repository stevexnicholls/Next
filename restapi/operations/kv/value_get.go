// Code generated by go-swagger; DO NOT EDIT.

package kv

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ValueGetHandlerFunc turns a function with the right signature into a value get handler
type ValueGetHandlerFunc func(ValueGetParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ValueGetHandlerFunc) Handle(params ValueGetParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ValueGetHandler interface for that can handle valid value get params
type ValueGetHandler interface {
	Handle(ValueGetParams, interface{}) middleware.Responder
}

// NewValueGet creates a new http.Handler for the value get operation
func NewValueGet(ctx *middleware.Context, handler ValueGetHandler) *ValueGet {
	return &ValueGet{Context: ctx, Handler: handler}
}

/*ValueGet swagger:route GET /v1alpha/kv/{key} kv valueGet

Get a value

*/
type ValueGet struct {
	Context *middleware.Context
	Handler ValueGetHandler
}

func (o *ValueGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewValueGetParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
